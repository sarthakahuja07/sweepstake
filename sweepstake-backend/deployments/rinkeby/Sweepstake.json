{
  "address": "0xf7e4F51342170273672Cd503F41C55EeB983AD75",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sweepstakeState",
          "type": "uint256"
        }
      ],
      "name": "SweepStake__upKeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Sweepstake__not_enough_entrance_fee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Sweepstake__state__notOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Sweepstake__transactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "SweepStake__requestedSweepstakeWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "entrant",
          "type": "address"
        }
      ],
      "name": "SweepStake__sweepStatkeEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "SweepStake__winnerPicked",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterSweepstake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getEntrant",
      "outputs": [
        {
          "internalType": "address",
          "name": "_entrantAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "_winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestWinnerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestWinnerTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_numWords",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "internalType": "enum Sweepstake.SweepStake_state",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x23fce0ccbeaab09b31fde29194866d599b78a37ee66c15e418540780c0e4056f",
  "receipt": {
    "to": null,
    "from": "0x27da4f2108274d608486d6e107BAB997aefB5dc3",
    "contractAddress": "0xf7e4F51342170273672Cd503F41C55EeB983AD75",
    "transactionIndex": 14,
    "gasUsed": "1214401",
    "logsBloom": "0x
    "blockHash": "0xfd76b37b4174d56ea8e97143b72762868449818d9f4a677388e787ad4d680b1b",
    "transactionHash": "0x23fce0ccbeaab09b31fde29194866d599b78a37ee66c15e418540780c0e4056f",
    "logs": [],
    "blockNumber": 11131613,
    "cumulativeGasUsed": "9963142",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "588",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "500000",
    "3"
  ],
  "numDeployments": 2,
  "solcInputHash": "8405a7de969837242f0267b2248918ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sweepstakeState\",\"type\":\"uint256\"}],\"name\":\"SweepStake__upKeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Sweepstake__not_enough_entrance_fee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Sweepstake__state__notOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Sweepstake__transactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"SweepStake__requestedSweepstakeWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entrant\",\"type\":\"address\"}],\"name\":\"SweepStake__sweepStatkeEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"SweepStake__winnerPicked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterSweepstake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getEntrant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_entrantAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestWinnerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestWinnerTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numWords\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum Sweepstake.SweepStake_state\",\"name\":\"_state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sweepstake.sol\":\"Sweepstake\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Sweepstake.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\r\\n\\r\\nerror Sweepstake__not_enough_entrance_fee();\\r\\nerror Sweepstake__state__notOpen();\\r\\nerror Sweepstake__transactionFailed();\\r\\nerror SweepStake__upKeepNotNeeded(\\r\\n    uint256 currentBalance,\\r\\n    uint256 numPlayers,\\r\\n    uint256 sweepstakeState\\r\\n);\\r\\n\\r\\ncontract Sweepstake is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n    enum SweepStake_state {\\r\\n        OPEN,\\r\\n        ENDED\\r\\n    }\\r\\n\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    uint256 private immutable i_interval;\\r\\n    address payable[] private s_entrants;\\r\\n    SweepStake_state private s_state;\\r\\n    uint16 private constant NUMWORDS = 1;\\r\\n    VRFCoordinatorV2Interface private immutable i_coordinator;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    bytes32 private immutable i_keyHash;\\r\\n    uint32 immutable i_callbackGasLimit;\\r\\n    uint16 constant REQUEST_CONFIMATIONS = 3;\\r\\n    address private s_latestWinner;\\r\\n    uint256 private s_latestWinnerAmount;\\r\\n    uint256 private s_latestWinnerTimestamp;\\r\\n\\r\\n    event SweepStake__sweepStatkeEnter(address indexed entrant);\\r\\n    event SweepStake__requestedSweepstakeWinner(uint256 indexed requestId);\\r\\n    event SweepStake__winnerPicked(address indexed winner);\\r\\n\\r\\n    constructor(\\r\\n        uint256 _entranceFee,\\r\\n        address _vrfCoordinatorAddress,\\r\\n        uint64 _subscriptionId,\\r\\n        bytes32 _keyHash,\\r\\n        uint32 _callbackGasLimit,\\r\\n        uint256 _interval\\r\\n    ) VRFConsumerBaseV2(_vrfCoordinatorAddress) {\\r\\n        i_entranceFee = _entranceFee;\\r\\n        i_subscriptionId = _subscriptionId;\\r\\n        i_keyHash = _keyHash;\\r\\n        i_interval = _interval;\\r\\n        s_state = SweepStake_state.OPEN;\\r\\n        i_callbackGasLimit = _callbackGasLimit;\\r\\n        s_latestWinnerTimestamp = block.timestamp;\\r\\n        i_coordinator = VRFCoordinatorV2Interface(_vrfCoordinatorAddress);\\r\\n    }\\r\\n\\r\\n    function enterSweepstake() public payable {\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Sweepstake__not_enough_entrance_fee();\\r\\n        }\\r\\n        if (s_state != SweepStake_state.OPEN) {\\r\\n            revert Sweepstake__state__notOpen();\\r\\n        }\\r\\n\\r\\n        s_entrants.push(payable(msg.sender));\\r\\n        emit SweepStake__sweepStatkeEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256, /* requestId */\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        uint256 randomWinnerIndex = randomWords[0] % s_entrants.length;\\r\\n        address payable randomWinner = s_entrants[randomWinnerIndex];\\r\\n        s_latestWinner = randomWinner;\\r\\n        s_entrants = new address payable[](0);\\r\\n        s_state = SweepStake_state.OPEN;\\r\\n        s_latestWinnerAmount = address(this).balance;\\r\\n        s_latestWinnerTimestamp = block.timestamp;\\r\\n        bool success = randomWinner.send(address(this).balance);\\r\\n\\r\\n        if (!success) {\\r\\n            revert Sweepstake__transactionFailed();\\r\\n        }\\r\\n\\r\\n        emit SweepStake__winnerPicked(randomWinner);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /* checkData */\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool upkeepNeeded,\\r\\n            bytes memory /* performData */\\r\\n        )\\r\\n    {\\r\\n        bool isOpen = s_state == SweepStake_state.OPEN;\\r\\n        bool atLeastOneEntrant = s_entrants.length > 0;\\r\\n        bool isBalace = address(this).balance > 0;\\r\\n        bool hasTimedOut = ((block.timestamp - s_latestWinnerTimestamp) >\\r\\n            i_interval);\\r\\n\\r\\n        upkeepNeeded = (isOpen && atLeastOneEntrant && isBalace && hasTimedOut);\\r\\n        return (upkeepNeeded, \\\"0x0\\\");\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes calldata /* performData */\\r\\n    ) external override {\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upkeepNeeded) {\\r\\n            revert SweepStake__upKeepNotNeeded(\\r\\n                address(this).balance,\\r\\n                s_entrants.length,\\r\\n                uint256(s_state)\\r\\n            );\\r\\n        }\\r\\n        if (s_state != SweepStake_state.OPEN) {\\r\\n            revert Sweepstake__state__notOpen();\\r\\n        }\\r\\n\\r\\n        s_state = SweepStake_state.ENDED;\\r\\n        uint256 requestId = i_coordinator.requestRandomWords(\\r\\n            i_keyHash,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUMWORDS\\r\\n        );\\r\\n\\r\\n        emit SweepStake__requestedSweepstakeWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256 _entranceFee) {\\r\\n        _entranceFee = i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getEntrant(uint256 index)\\r\\n        public\\r\\n        view\\r\\n        returns (address _entrantAddress)\\r\\n    {\\r\\n        return s_entrants[index];\\r\\n    }\\r\\n\\r\\n    function getState() public view returns (SweepStake_state _state) {\\r\\n        _state = s_state;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint _numWords) {\\r\\n        _numWords = NUMWORDS;\\r\\n    }\\r\\n\\r\\n    function getLatestWinner() public view returns (address _winner) {\\r\\n        _winner = s_latestWinner;\\r\\n    }\\r\\n\\r\\n    function getLatestWinnerAmount() public view returns (uint256 _amount) {\\r\\n        _amount = s_latestWinnerAmount;\\r\\n    }\\r\\n\\r\\n    function getLatestWinnerTimeStamp()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 _timestamp)\\r\\n    {\\r\\n        _timestamp = s_latestWinnerTimestamp;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256 _interval) {\\r\\n        _interval = i_interval;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x47074c90c56e925b39bd76d0860d41d3ca3e14adc84082bcb4a7741179fa1c57\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200183838038062001838833981810160405281019062000038919062000294565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508560a081815250508367ffffffffffffffff166101008167ffffffffffffffff16815250508261012081815250508060c081815250506000600160006101000a81548160ff02191690836001811115620000cd57620000cc62000330565b5b02179055508163ffffffff166101408163ffffffff1681525050426003819055508473ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250505050505050506200035f565b600080fd5b6000819050919050565b620001488162000133565b81146200015457600080fd5b50565b60008151905062000168816200013d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019b826200016e565b9050919050565b620001ad816200018e565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b600067ffffffffffffffff82169050919050565b620001f281620001d3565b8114620001fe57600080fd5b50565b6000815190506200021281620001e7565b92915050565b6000819050919050565b6200022d8162000218565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000157565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a0162000201565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a0162000157565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611469620003cf60003960006105ac01526000610568015260006105890152600061052c01526000818161086d015261090301526000818161030301526106ab015260008181610340015261039401526114696000f3fe6080604052600436106100ab5760003560e01c80634fdd3b64116100645780634fdd3b64146101c457806353a2c19a146101ef5780635e1051181461021a5780636e04ff0d1461022457806391ad27b414610262578063c93329541461028d576100b2565b806304763ce0146100b457806309bc33a7146100f15780631865c57d1461011c5780631fe543e31461014757806328a318e0146101705780634585e33b1461019b576100b2565b366100b257005b005b3480156100c057600080fd5b506100db60048036038101906100d69190610c26565b6102b8565b6040516100e89190610c94565b60405180910390f35b3480156100fd57600080fd5b506101066102ff565b6040516101139190610cbe565b60405180910390f35b34801561012857600080fd5b50610131610327565b60405161013e9190610d50565b60405180910390f35b34801561015357600080fd5b5061016e60048036038101906101699190610ec4565b61033e565b005b34801561017c57600080fd5b506101856103fe565b6040516101929190610cbe565b60405180910390f35b3480156101a757600080fd5b506101c260048036038101906101bd9190610f7b565b610408565b005b3480156101d057600080fd5b506101d9610674565b6040516101e69190610c94565b60405180910390f35b3480156101fb57600080fd5b5061020461069c565b6040516102119190610cbe565b60405180910390f35b6102226106a9565b005b34801561023057600080fd5b5061024b6004803603810190610246919061107d565b610818565b604051610259929190611169565b60405180910390f35b34801561026e57600080fd5b506102776108ff565b6040516102849190610cbe565b60405180910390f35b34801561029957600080fd5b506102a2610927565b6040516102af9190610cbe565b60405180910390f35b60008082815481106102cd576102cc611199565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103e79291906111c8565b60405180910390fd5b6103fa8282610931565b5050565b6000600354905090565b600061042260405180602001604052806000815250610818565b509050806104915747600080549050600160009054906101000a900460ff16600181111561045357610452610cd9565b5b6040517ffff05ca2000000000000000000000000000000000000000000000000000000008152600401610488939291906111f1565b60405180910390fd5b600060018111156104a5576104a4610cd9565b5b600160009054906101000a900460ff1660018111156104c7576104c6610cd9565b5b146104fe576040517ff3a2a6c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060006101000a81548160ff0219169083600181111561052357610522610cd9565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105ed9594939291906112db565b602060405180830381600087803b15801561060757600080fd5b505af115801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f9190611343565b9050807fe5b1701f4146d8a6997b37a0bfcc2e7d05b73a784aaea25c5d19f07d58f743e660405160405180910390a250505050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610703576040517f8395fdbe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561071757610716610cd9565b5b600160009054906101000a900460ff16600181111561073957610738610cd9565b5b14610770576040517ff3a2a6c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f84ba1970ba3572c1b45f55ed2d3d397df8454e7fd663c3b3eb07f10dd500d6d360405160405180910390a2565b60006060600080600181111561083157610830610cd9565b5b600160009054906101000a900460ff16600181111561085357610852610cd9565b5b1490506000806000805490501190506000804711905060007f00000000000000000000000000000000000000000000000000000000000000006003544261089a919061139f565b1190508380156108a75750825b80156108b05750815b80156108b95750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b600080805490508260008151811061094c5761094b611199565b5b602002602001015161095e9190611402565b9050600080828154811061097557610974611199565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109fd576109fc610d81565b5b604051908082528060200260200182016040528015610a2b5781602001602082028036833780820191505090505b5060009080519060200190610a41929190610b35565b506000600160006101000a81548160ff02191690836001811115610a6857610a67610cd9565b5b0217905550476002819055504260038190555060008173ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610aeb576040517f278512dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f74ad9d1fbddec9367274c01a0e99b01d3e96a996bf407ca2d459e6d490d4112460405160405180910390a25050505050565b828054828255906000526020600020908101928215610bae579160200282015b82811115610bad5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b55565b5b509050610bbb9190610bbf565b5090565b5b80821115610bd8576000816000905550600101610bc0565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c0381610bf0565b8114610c0e57600080fd5b50565b600081359050610c2081610bfa565b92915050565b600060208284031215610c3c57610c3b610be6565b5b6000610c4a84828501610c11565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c7e82610c53565b9050919050565b610c8e81610c73565b82525050565b6000602082019050610ca96000830184610c85565b92915050565b610cb881610bf0565b82525050565b6000602082019050610cd36000830184610caf565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d1957610d18610cd9565b5b50565b6000819050610d2a82610d08565b919050565b6000610d3a82610d1c565b9050919050565b610d4a81610d2f565b82525050565b6000602082019050610d656000830184610d41565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610db982610d70565b810181811067ffffffffffffffff82111715610dd857610dd7610d81565b5b80604052505050565b6000610deb610bdc565b9050610df78282610db0565b919050565b600067ffffffffffffffff821115610e1757610e16610d81565b5b602082029050602081019050919050565b600080fd5b6000610e40610e3b84610dfc565b610de1565b90508083825260208201905060208402830185811115610e6357610e62610e28565b5b835b81811015610e8c5780610e788882610c11565b845260208401935050602081019050610e65565b5050509392505050565b600082601f830112610eab57610eaa610d6b565b5b8135610ebb848260208601610e2d565b91505092915050565b60008060408385031215610edb57610eda610be6565b5b6000610ee985828601610c11565b925050602083013567ffffffffffffffff811115610f0a57610f09610beb565b5b610f1685828601610e96565b9150509250929050565b600080fd5b60008083601f840112610f3b57610f3a610d6b565b5b8235905067ffffffffffffffff811115610f5857610f57610f20565b5b602083019150836001820283011115610f7457610f73610e28565b5b9250929050565b60008060208385031215610f9257610f91610be6565b5b600083013567ffffffffffffffff811115610fb057610faf610beb565b5b610fbc85828601610f25565b92509250509250929050565b600080fd5b600067ffffffffffffffff821115610fe857610fe7610d81565b5b610ff182610d70565b9050602081019050919050565b82818337600083830152505050565b600061102061101b84610fcd565b610de1565b90508281526020810184848401111561103c5761103b610fc8565b5b611047848285610ffe565b509392505050565b600082601f83011261106457611063610d6b565b5b813561107484826020860161100d565b91505092915050565b60006020828403121561109357611092610be6565b5b600082013567ffffffffffffffff8111156110b1576110b0610beb565b5b6110bd8482850161104f565b91505092915050565b60008115159050919050565b6110db816110c6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561111b578082015181840152602081019050611100565b8381111561112a576000848401525b50505050565b600061113b826110e1565b61114581856110ec565b93506111558185602086016110fd565b61115e81610d70565b840191505092915050565b600060408201905061117e60008301856110d2565b81810360208301526111908184611130565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506111dd6000830185610c85565b6111ea6020830184610c85565b9392505050565b60006060820190506112066000830186610caf565b6112136020830185610caf565b6112206040830184610caf565b949350505050565b6000819050919050565b61123b81611228565b82525050565b600067ffffffffffffffff82169050919050565b61125e81611241565b82525050565b600061ffff82169050919050565b61127b81611264565b82525050565b600063ffffffff82169050919050565b61129a81611281565b82525050565b6000819050919050565b60006112c56112c06112bb84611264565b6112a0565b611281565b9050919050565b6112d5816112aa565b82525050565b600060a0820190506112f06000830188611232565b6112fd6020830187611255565b61130a6040830186611272565b6113176060830185611291565b61132460808301846112cc565b9695505050505050565b60008151905061133d81610bfa565b92915050565b60006020828403121561135957611358610be6565b5b60006113678482850161132e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113aa82610bf0565b91506113b583610bf0565b9250828210156113c8576113c7611370565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061140d82610bf0565b915061141883610bf0565b925082611428576114276113d3565b5b82820690509291505056fea2646970667358221220c88e262b38760d45ac179f12bdf33b678d790e9ed8b3bacadbbd97f74740912664736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c80634fdd3b64116100645780634fdd3b64146101c457806353a2c19a146101ef5780635e1051181461021a5780636e04ff0d1461022457806391ad27b414610262578063c93329541461028d576100b2565b806304763ce0146100b457806309bc33a7146100f15780631865c57d1461011c5780631fe543e31461014757806328a318e0146101705780634585e33b1461019b576100b2565b366100b257005b005b3480156100c057600080fd5b506100db60048036038101906100d69190610c26565b6102b8565b6040516100e89190610c94565b60405180910390f35b3480156100fd57600080fd5b506101066102ff565b6040516101139190610cbe565b60405180910390f35b34801561012857600080fd5b50610131610327565b60405161013e9190610d50565b60405180910390f35b34801561015357600080fd5b5061016e60048036038101906101699190610ec4565b61033e565b005b34801561017c57600080fd5b506101856103fe565b6040516101929190610cbe565b60405180910390f35b3480156101a757600080fd5b506101c260048036038101906101bd9190610f7b565b610408565b005b3480156101d057600080fd5b506101d9610674565b6040516101e69190610c94565b60405180910390f35b3480156101fb57600080fd5b5061020461069c565b6040516102119190610cbe565b60405180910390f35b6102226106a9565b005b34801561023057600080fd5b5061024b6004803603810190610246919061107d565b610818565b604051610259929190611169565b60405180910390f35b34801561026e57600080fd5b506102776108ff565b6040516102849190610cbe565b60405180910390f35b34801561029957600080fd5b506102a2610927565b6040516102af9190610cbe565b60405180910390f35b60008082815481106102cd576102cc611199565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103e79291906111c8565b60405180910390fd5b6103fa8282610931565b5050565b6000600354905090565b600061042260405180602001604052806000815250610818565b509050806104915747600080549050600160009054906101000a900460ff16600181111561045357610452610cd9565b5b6040517ffff05ca2000000000000000000000000000000000000000000000000000000008152600401610488939291906111f1565b60405180910390fd5b600060018111156104a5576104a4610cd9565b5b600160009054906101000a900460ff1660018111156104c7576104c6610cd9565b5b146104fe576040517ff3a2a6c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018060006101000a81548160ff0219169083600181111561052357610522610cd9565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105ed9594939291906112db565b602060405180830381600087803b15801561060757600080fd5b505af115801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f9190611343565b9050807fe5b1701f4146d8a6997b37a0bfcc2e7d05b73a784aaea25c5d19f07d58f743e660405160405180910390a250505050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600161ffff16905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610703576040517f8395fdbe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561071757610716610cd9565b5b600160009054906101000a900460ff16600181111561073957610738610cd9565b5b14610770576040517ff3a2a6c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f84ba1970ba3572c1b45f55ed2d3d397df8454e7fd663c3b3eb07f10dd500d6d360405160405180910390a2565b60006060600080600181111561083157610830610cd9565b5b600160009054906101000a900460ff16600181111561085357610852610cd9565b5b1490506000806000805490501190506000804711905060007f00000000000000000000000000000000000000000000000000000000000000006003544261089a919061139f565b1190508380156108a75750825b80156108b05750815b80156108b95750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b600080805490508260008151811061094c5761094b611199565b5b602002602001015161095e9190611402565b9050600080828154811061097557610974611199565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109fd576109fc610d81565b5b604051908082528060200260200182016040528015610a2b5781602001602082028036833780820191505090505b5060009080519060200190610a41929190610b35565b506000600160006101000a81548160ff02191690836001811115610a6857610a67610cd9565b5b0217905550476002819055504260038190555060008173ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050905080610aeb576040517f278512dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f74ad9d1fbddec9367274c01a0e99b01d3e96a996bf407ca2d459e6d490d4112460405160405180910390a25050505050565b828054828255906000526020600020908101928215610bae579160200282015b82811115610bad5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b55565b5b509050610bbb9190610bbf565b5090565b5b80821115610bd8576000816000905550600101610bc0565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c0381610bf0565b8114610c0e57600080fd5b50565b600081359050610c2081610bfa565b92915050565b600060208284031215610c3c57610c3b610be6565b5b6000610c4a84828501610c11565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c7e82610c53565b9050919050565b610c8e81610c73565b82525050565b6000602082019050610ca96000830184610c85565b92915050565b610cb881610bf0565b82525050565b6000602082019050610cd36000830184610caf565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d1957610d18610cd9565b5b50565b6000819050610d2a82610d08565b919050565b6000610d3a82610d1c565b9050919050565b610d4a81610d2f565b82525050565b6000602082019050610d656000830184610d41565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610db982610d70565b810181811067ffffffffffffffff82111715610dd857610dd7610d81565b5b80604052505050565b6000610deb610bdc565b9050610df78282610db0565b919050565b600067ffffffffffffffff821115610e1757610e16610d81565b5b602082029050602081019050919050565b600080fd5b6000610e40610e3b84610dfc565b610de1565b90508083825260208201905060208402830185811115610e6357610e62610e28565b5b835b81811015610e8c5780610e788882610c11565b845260208401935050602081019050610e65565b5050509392505050565b600082601f830112610eab57610eaa610d6b565b5b8135610ebb848260208601610e2d565b91505092915050565b60008060408385031215610edb57610eda610be6565b5b6000610ee985828601610c11565b925050602083013567ffffffffffffffff811115610f0a57610f09610beb565b5b610f1685828601610e96565b9150509250929050565b600080fd5b60008083601f840112610f3b57610f3a610d6b565b5b8235905067ffffffffffffffff811115610f5857610f57610f20565b5b602083019150836001820283011115610f7457610f73610e28565b5b9250929050565b60008060208385031215610f9257610f91610be6565b5b600083013567ffffffffffffffff811115610fb057610faf610beb565b5b610fbc85828601610f25565b92509250509250929050565b600080fd5b600067ffffffffffffffff821115610fe857610fe7610d81565b5b610ff182610d70565b9050602081019050919050565b82818337600083830152505050565b600061102061101b84610fcd565b610de1565b90508281526020810184848401111561103c5761103b610fc8565b5b611047848285610ffe565b509392505050565b600082601f83011261106457611063610d6b565b5b813561107484826020860161100d565b91505092915050565b60006020828403121561109357611092610be6565b5b600082013567ffffffffffffffff8111156110b1576110b0610beb565b5b6110bd8482850161104f565b91505092915050565b60008115159050919050565b6110db816110c6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561111b578082015181840152602081019050611100565b8381111561112a576000848401525b50505050565b600061113b826110e1565b61114581856110ec565b93506111558185602086016110fd565b61115e81610d70565b840191505092915050565b600060408201905061117e60008301856110d2565b81810360208301526111908184611130565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506111dd6000830185610c85565b6111ea6020830184610c85565b9392505050565b60006060820190506112066000830186610caf565b6112136020830185610caf565b6112206040830184610caf565b949350505050565b6000819050919050565b61123b81611228565b82525050565b600067ffffffffffffffff82169050919050565b61125e81611241565b82525050565b600061ffff82169050919050565b61127b81611264565b82525050565b600063ffffffff82169050919050565b61129a81611281565b82525050565b6000819050919050565b60006112c56112c06112bb84611264565b6112a0565b611281565b9050919050565b6112d5816112aa565b82525050565b600060a0820190506112f06000830188611232565b6112fd6020830187611255565b61130a6040830186611272565b6113176060830185611291565b61132460808301846112cc565b9695505050505050565b60008151905061133d81610bfa565b92915050565b60006020828403121561135957611358610be6565b5b60006113678482850161132e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113aa82610bf0565b91506113b583610bf0565b9250828210156113c8576113c7611370565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061140d82610bf0565b915061141883610bf0565b925082611428576114276113d3565b5b82820690509291505056fea2646970667358221220c88e262b38760d45ac179f12bdf33b678d790e9ed8b3bacadbbd97f74740912664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 911,
        "contract": "contracts/Sweepstake.sol:Sweepstake",
        "label": "s_entrants",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 914,
        "contract": "contracts/Sweepstake.sol:Sweepstake",
        "label": "s_state",
        "offset": 0,
        "slot": "1",
        "type": "t_enum(SweepStake_state)904"
      },
      {
        "astId": 931,
        "contract": "contracts/Sweepstake.sol:Sweepstake",
        "label": "s_latestWinner",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 933,
        "contract": "contracts/Sweepstake.sol:Sweepstake",
        "label": "s_latestWinnerAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 935,
        "contract": "contracts/Sweepstake.sol:Sweepstake",
        "label": "s_latestWinnerTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(SweepStake_state)904": {
        "encoding": "inplace",
        "label": "enum Sweepstake.SweepStake_state",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}